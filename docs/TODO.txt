* Test how different kinds of networks (mobile, localhost loopback,
  local wireless / wired) affect the UX.

* Test if optimizing the implementation makes any difference:
  - More efficient (binary) WS protocol?
  - Turning off console logging?
  - Packing multiple events in one message?

* Test if sending all / some (e.g. every Nth, or at most 10/sec)
  mouse/touchmove positions affect the UX.

* Add measurements to get some numbers from the above, for the report.

* Try circumventing Content-Security-Policy (e.g. Facebook), by
  combining all of the JS in the bookmark?

* Play with several pointers?

* Implement scrolling?

* Make remote somewhat better looking.

* Add presence indicator to remote ("is anyone listening?"), e.g. by
  sending the info (number of connected clients on channel?) once a
  second?

* Auto-create a random channel id?






K: Try Latency with test persons

10 = Apple magic trackpad
0  = unusable

|  ms | Testuser 1 |  ms | Testuser 2 |  ms | Testuser 3 |
|:---:|:----------:|:---:|:----------:|:---:|:----------:|
| 500 |      2     | 400 |      2     |  0  |      8     |
| 200 |      4     | 100 |      5     | 500 |      1     |
| 100 |      5     | 300 |      4     | 300 |      4     |
|  0  |      6     |  0  |      8     | 100 |      8     |
| 100 |      6     | 100 |      8     |  0  |      9     |
|  0  |      8     |  0  |      8     | 200 |      7     |

Latency +- 50

K: Try over different bandwidths

| 2G (Heroku) | 3G (Heroku) | LTE (Heroku) | WI-FI (Heroku) | WI-FI Local network |
|:-----------:|:-----------:|:------------:|:--------------:|:-------------------:|
|    500ms    |     70ms    |     70ms     |      70ms      |         5ms         |

Chrome did not support latency simulation

Did not use frameworks (but express, ws)



tell that the pointer is just an image, and click checks what element pointer is over.

Store roomcode in sessionstorage.

mousemove on computer, touchmove on mobile.

gyro on iphone, check what devices support it.

Why not work on all sites.

S: Why not working on page transition (javascript injection). Maybe a plugin could fix it.

S: How qr-code gets generated.

K: Closure compiler, whole script in bookmark.

Screen size always 100% on client and remote

K: Gyro times second.

| iOS Safari |
|:----------:|
|    60Hz    |

S: How many times a second under normal/extreme use, browser differences.

CPU load on an Intel Core i7-3610QM 2.30GHz (Quad core), Google Chrome
both controller and client, with local server: ~9%, quite evenly
distributed accross cores.

Chrome's real time rendering of WebSocket frames is quite resource
intensive, affects load measuring results considerably.

About 80-90 messages/sec submited with the above laptop when the mouse
is moving at normal speed, ~120 when fast. WS packet size about
40bytes with batch size 1. Causes network traffic (both ways included)
about ~50-60kB/s. Does not compute, 120*40=4800 --> overhead?

K: Browser support

* Sockets

| IE | Firefox | Chrome | Safari | Opera | iOS Safari | Android browser |
|:--:|:-------:|:------:|:------:|:-----:|:----------:|:---------------:|
| 10 |    6    |   15   |    6   |  12.1 |     6.1    |       4.4       |

* DeviceOrientation

| IE | Firefox | Chrome | Safari | Opera | iOS Safari | Android browser |
|:--:|:-------:|:------:|:------:|:-----:|:----------:|:---------------:|
| 11 |    6    |   7    |    -   |   15  |     4.3    |        3        |

What have we learned:
	* Really efficient.
	* Pure javascript
	* Set up project.
	* Using sockets
	* Gyro
	* Little code, alot happends.

Project setup, github push to heroku.

Usage possibilities:
* remote control of presentations
* remote assistance of web app use
* recording user actions on a website, e.g. for usability evaluation, UI research, trials (if the functionality would be "flipped" so that the current remote controller logic would run on an arbitrary website)
